plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
}

group = 'com.algaworks.algamoney'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
	jcenter()
	maven { 
		url "https://jaspersoft.artifactoryonline.com/jaspersoft/jr-ce-releases"
	}
	maven {
        url 'https://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
    }
    maven {
      url 'https://jasperreports.sourceforge.net/maven2'
    }
    maven {
      url 'https://repository.jboss.org/maven2/'
    }
}

test{
	useJUnitPlatform()
	dependsOn 'cleanTest'

	testLogging {
		events "passed", "skipped", "failed"
	}
	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
	testLogging {
		exceptionFormat = 'full'
	}
}

ext{
	oauth2Verison = '0.3.1'
	jwtVersion = '1.1.1.RELEASE'
	jasperreportsVersion = '6.5.1'
	jasperreportsFunctionsVersion = '6.5.1'
	jasperreportsFontsVersion = '6.0.0'
	awsVersion = '1.12.335'
}

dependencies {
	implementation "com.amazonaws:aws-java-sdk:${awsVersion}"
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation "org.apache.commons:commons-lang3"
	implementation "org.springframework.boot:spring-boot-starter"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.security:spring-security-oauth2-authorization-server:$oauth2Verison"
	implementation "org.springframework.security:spring-security-jwt:$jwtVersion"
	implementation "org.thymeleaf.extras:thymeleaf-extras-java8time"

	compileOnly "org.projectlombok:lombok"
	compileOnly "org.hibernate:hibernate-jpamodelgen"

	developmentOnly "org.springframework.boot:spring-boot-devtools"

	runtimeOnly 'com.mysql:mysql-connector-j'
	
	annotationProcessor "org.projectlombok:lombok"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "org.hibernate:hibernate-jpamodelgen"

	//compile "net.sf.jasperreports:jasperreports:${jasperreportsVersion}"
	//compile "net.sf.jasperreports:jasperreports-functions:${jasperreportsFunctionsVersion}"
	//compile "net.sf.jasperreports:jasperreports-fonts:${jasperreportsFontsVersion}"

	testImplementation "org.springframework.boot:spring-boot-starter-test"

	testAnnotationProcessor "org.hibernate:hibernate-jpamodelgen"
	
}

bootRun{
	jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005'
}

build{
	File trigger = file('src/main/resources/trigger.txt')
	trigger.write new Date().getTime().toString()
}